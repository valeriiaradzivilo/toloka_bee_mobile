import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_native_splash/flutter_native_splash.dart';
import 'package:flutter_translate/flutter_translate.dart';
import 'package:gap/gap.dart';

import 'common/routes.dart';
import 'common/theme/theme.dart';
import 'common/theme/util.dart';
import 'common/widgets/app_icon.dart';
import 'data/di.dart';
import 'features/authentication/ui/create_account_screen.dart';
import 'features/authentication/ui/login_screen.dart';
import 'features/main_screen/main_screen.dart';
import 'features/profile/ui/profile_screen.dart';

void main() async {
  final WidgetsBinding widgetsBinding = WidgetsFlutterBinding.ensureInitialized();
  FlutterNativeSplash.preserve(widgetsBinding: widgetsBinding);

  final delegate =
      await LocalizationDelegate.create(fallbackLocale: 'en_US', supportedLocales: ['en_US']);

  await init();

  ErrorWidget.builder = (FlutterErrorDetails details) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Center(
          child: Container(
            height: 500,
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
                color: Colors.white,
                border: Border.all(color: Colors.red),
                borderRadius: BorderRadius.circular(20)),
            child: SingleChildScrollView(
              child: Column(
                children: [
                  Text(
                    translate('error.screen.title'),
                    style: const TextStyle(
                        color: Colors.red, fontSize: 20, fontWeight: FontWeight.bold),
                  ),
                  Text(
                    translate('error.screen.message'),
                    style: const TextStyle(color: Colors.red),
                  ),
                  const Gap(8),
                  if (kDebugMode)
                    Text(
                      details.exceptionAsString(),
                      style: const TextStyle(color: Colors.red),
                    ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  };
  runApp(LocalizedApp(delegate, const MyApp()));
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(final BuildContext context) {
    final brightness = View.of(context).platformDispatcher.platformBrightness;
    final TextTheme textTheme = ZipTheme.createTextTheme(context, 'Roboto Serif', 'Roboto');
    final MaterialTheme theme = MaterialTheme(textTheme);
    final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

    FlutterNativeSplash.remove();

    return MaterialApp(
      title: translate('app.name'),
      theme: brightness == Brightness.light ? theme.light() : theme.dark(),
      initialRoute: Routes.mainScreen,
      navigatorKey: navigatorKey,
      routes: {
        Routes.mainScreen: (context) => const MainScreen(),
        Routes.loginScreen: (context) => const LoginScreen(),
        Routes.createAccountScreen: (context) => const CreateAccountScreen(),
      },
      debugShowCheckedModeBanner: false,
      darkTheme: theme.dark(),
      onGenerateRoute: (settings) {
        switch (settings.name) {
          case Routes.loginScreen:
            return MaterialPageRoute(builder: (context) => const LoginScreen());
          case Routes.createAccountScreen:
            return MaterialPageRoute(builder: (context) => const CreateAccountScreen());
          case Routes.profileScreen:
            return MaterialPageRoute(builder: (context) => const ProfileScreen());
          default:
            return MaterialPageRoute(builder: (context) => const MainScreen());
        }
      },
      builder: (context, child) => SafeArea(
        child: Stack(
          children: [
            if (child != null) child,
            Align(
              alignment: Alignment.topRight,
              child: IconButton(
                onPressed: () {
                  final ctx = navigatorKey.currentState?.context;
                  if (ctx == null) return;
                  showAboutDialog(
                    context: ctx,
                    applicationVersion: 'v1.0.0',
                    applicationIcon: const AppIcon(),
                    applicationLegalese:
                        'This app was created to connect volunteers and people in need. Be kind and open but do not share any sensitive info.\nIf the app requires any data about you to be shown to other people - you will be notified.\n\nThe map does not reflect user location accurately to protect user data. Some "user locations" might be generated by the app. Please do not use this app for navigation.\n\nCreated by KPI Student as final project. Â© 2025',
                  );
                },
                icon: const AppIcon(),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
